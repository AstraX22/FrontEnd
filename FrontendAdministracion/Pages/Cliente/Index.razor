@page "/cliente/index"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<!-- Encabezado de la página -->
<MudText Typo="Typo.h2" Class="ml">Clientes</MudText>

<!-- Barra de herramientas con botones de agregar y búsqueda -->
<MudTable Items="@clientes" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <!-- Botón para agregar un nuevo proveedor -->
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="goAdd" />
        <MudSpacer />
        <!-- Campo de búsqueda -->
        <MudTextField @bind-Value="searchText" OnKeyUp="enviar" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <!-- Encabezados de la tabla -->
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Apellido</MudTh>
        <MudTh>Direccion</MudTh>
        <MudTh>Correo</MudTh>
        <MudTh>Teléfono</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>

    <!-- Plantilla de fila para mostrar los datos de los clientes -->
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Apellido">@context.Apellido</MudTd>
        <MudTd DataLabel="Direccion">@context.Direccion</MudTd>
        <MudTd DataLabel="Correo">@context.Correo</MudTd>
        <MudTd DataLabel="Teléfono">@context.Telefono</MudTd>
        <MudTd>
            <!-- Botones de editar y eliminar para cada cliente -->
            <MudButton Link="@($"/cliente/editar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Tertiary"
                       Class="text-center">Editar</MudButton>
            <MudButton Link="@($"/cliente/eliminar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning"
                       Class="text-center">Eliminar</MudButton>
        </MudTd>
    </RowTemplate>

    <!-- Paginación de la tabla -->
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Cliente> clientes = new List<Cliente>();
    <!-- Lista de clientes -->
    private string searchText = "";
    <!-- Variable para almacenar el texto de búsqueda -->
    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
        <!-- Llama a la función para obtener todos los clientes -->
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.GetStringAsync("cliente");
        <!-- Hace una solicitud GET para obtener la lista de clientes -->
        clientes = JsonSerializer.Deserialize<IEnumerable<Cliente>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        <!-- Deserializa la respuesta en una lista de clientes -->
    }

    private void goAdd()
    {
        NavigationManager.NavigateTo("cliente/agregar");
        <!-- Navega a la página para agregar un nuevo cliente -->
    }

    private async Task search()
    {
        var resp = await httpClient.PostAsJsonAsync<Cliente>("cliente/buscar", new Cliente { Nombre = searchText });
        string respString = await resp.Content.ReadAsStringAsync();
        clientes = JsonSerializer.Deserialize<IEnumerable<Cliente>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void enviar(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            search();
        }
    }
}
